import moment from 'moment-business-days';
import i18n from 'evolution-frontend/lib/config/i18n.config';
import { _isBlank } from 'chaire-lib-common/lib/utils/LodashExtensions';
import * as surveyHelperNew from 'evolution-common/lib/utils/helpers';
import * as odSurveyHelper from 'evolution-common/lib/services/odSurvey/helpers';

// TODO: This custom file should be generated by the Evolution Generator (or eliminated complety).
// TODO: We need this file to setup the interview (language, section start time, actions, household persons count (?)).
// TODO: We also need this file to reject some interviews that are not valid (home not in territory, no adults in household).
// TODO: In other words, if we can improve the Group and Section navigation in Evolution, we can eliminate this file completely.
export default function (interview, sectionShortname) {
    moment.locale(i18n.language); // seems we need this because it is not set correctly globally

    // If home is not in the territory, make sure to redirect to completed section
    if (sectionShortname !== 'home' && sectionShortname !== 'completed') {
        const homeInTerritory = surveyHelperNew.getResponse(interview, 'home._homeIsInTerritory', undefined);
        if (homeInTerritory === false) {
            return {
                'responses._activeSection': 'completed'
            };
        }
    }

    // If household don't have any adults, make sure to redirect to completed section
    if (sectionShortname !== 'home' && sectionShortname !== 'household' && sectionShortname !== 'completed') {
        const countAdults = odSurveyHelper.countAdults({ interview });
        if (countAdults === 0) {
            return {
                'responses._activeSection': 'completed'
            };
        }
    }

    // Prepare the responses object with the current language, section start time, actions, and household persons count
    const responses = {
        ['responses._language']: i18n.language, // TODO: follow language changes during the interview
        [`responses._sections.${sectionShortname}._startedAt`]: moment().unix(),
        // ['responses._sections._actions']: odSurveyHelper.generateSectionAction(interview, sectionShortname, 'start'),
        ['responses.household._personsCount']: odSurveyHelper.countPersons({interview})
    };

    // Check if household size and persons are in sync
    if (sectionShortname !== 'home' && sectionShortname !== 'household') {
        const householdSize = surveyHelperNew.getResponse(interview, 'household.size', undefined);
        const householdPersons = surveyHelperNew.getResponse(interview, 'household.persons', undefined);
        if (!_isBlank(householdSize) && !_isBlank(householdPersons)) {
            const personsCount = odSurveyHelper.countPersons({interview});
            if (personsCount !== householdSize) {
                responses['responses.household.size'] = personsCount;
            }
        }
    }
    return responses;
}
